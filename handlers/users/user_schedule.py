from aiogram.dispatcher import FSMContext
from keyboards.default import user_markup
from loader import dp
from aiogram.types import Message, CallbackQuery
from loader import rasp
from datetime import datetime, timedelta
from utils.misc.schedule_creator import create_rasp_text
from states import User_form
from utils.misc import rate_limit
from utils.misc.weeks import get_week
from keyboards.inline import study_years_markup, other_study_years_markup
from keyboards.inline.callback_datas import study_year_callback
from keyboards.default.groups_keybard import select_groups_to_show
import emoji


@dp.message_handler(text="‚ùóÔ∏è–°–µ–≥–æ–¥–Ω—è", state=User_form.default_state)
@rate_limit(0.5)
async def rasp_today(message: Message, state: FSMContext):
    async with state.proxy() as data:
        try:
            await message.answer(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"
                                 f"{rasp[get_week(datetime.today())][data['user_group']][datetime.today().weekday()]}",
                                 reply_markup=user_markup)
        except KeyError:
            await message.answer("–°–µ–≥–æ–¥–Ω—è –ø–∞—Ä –Ω–µ—Ç ü•≥", reply_markup=user_markup)


@dp.message_handler(text="‚ùï–ó–∞–≤—Ç—Ä–∞", state=User_form.default_state)
@rate_limit(0.5)
async def rasp_tomorrow(message: Message, state: FSMContext):
    async with state.proxy() as data:
        try:
            tomorrow = datetime.today() + timedelta(days=1)
            await message.answer(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞:\n\n"
                                 f"{rasp[get_week(tomorrow)][data['user_group']][tomorrow.weekday()]}", reply_markup=user_markup)
        except KeyError:
            await message.answer("–ó–∞–≤—Ç—Ä–∞ –ø–∞—Ä –Ω–µ—Ç ü•≥", reply_markup=user_markup)


@dp.message_handler(text="‚ñ∂Ô∏è –¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è", state=User_form.default_state)
# @rate_limit(0.5)
async def rasp_first_week(message: Message, state: FSMContext):
    async with state.proxy() as data:
        await message.answer(text=create_rasp_text(get_week(datetime.today()), data['user_group'], rasp))


@dp.message_handler(text="‚è© –°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è", state=User_form.default_state)
# @rate_limit(0.5)
async def rasp_second_week(message: Message, state: FSMContext):
    async with state.proxy() as data:
        await message.answer(text=create_rasp_text(int(not get_week(datetime.today())), data['user_group'], rasp))


@dp.message_handler(text="üë®‚Äçüëß‚Äçüë¶–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –≥—Ä—É–ø–ø", state=User_form.default_state)
@rate_limit(0.5)
async def rasp_other_group(message: Message):
    await User_form.other_study_year.set()
    await message.answer(emoji.emojize(f"–í—ã–±–µ—Ä–∏ –∫—É—Ä—Å –≥—Ä—É–ø–ø—ã, —É –∫–æ—Ç–æ—Ä–æ–π —Ç—ã —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ :mortar_board:", use_aliases=True),
                         reply_markup=other_study_years_markup)
